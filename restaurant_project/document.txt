

ðŸ“‘ Project Documentation: Restaurant Review Management System

-----------------------------------------------------------------------------------------------------------------
1. Project Overview

The Restaurant Review Management System is a web-based application built using Django and integrated with a Machine Learning model for sentiment analysis of customer reviews.

The ML model classifies reviews into Positive, Negative, or Neutral.

Positive & Neutral reviews are displayed to customers.

Negative reviews are only visible to the restaurant admin/owner, helping them identify drawbacks and improve services.

-------------------------------------------------------------------------------------------------------------------------------

2. Features

âœ… Customer Review Submission (name, rating, comment).

âœ… ML-based Sentiment Analysis (Positive, Negative, Neutral).z

âœ… Review Filtering:

Positive & Neutral â†’ Visible to all.

Negative â†’ Visible only to admin.

âœ… Admin Dashboard:

View all customer reviews.

âœ… User Authentication (login/logout for admin).

âœ… Responsive Frontend (HTML, CSS, Bootstrap/Tailwind).

------------------------------------------------------------------------------------------------------------------------

3. Tech Stack

Backend: Django (Python)

Frontend: HTML, CSS, Bootstrap

Database: SQLite (default in Django)

Machine Learning: Scikit-learn (Logistic Regression / Naive Bayes model)

Libraries:

scikit-learn (ML)

pandas (data processing)

joblib (model saving/loading)

------------------------------------------------------------------------------------------------------------------------

4. System Architecture

User submits a review â†’ Stored in DB.

Review text is passed to ML model â†’ Classified into sentiment.

Django saves review with sentiment label.

On display:

Positive & Neutral reviews â†’ Show on customer page.

Negative reviews â†’ Show on owner dashboard only.

-------------------------------------------------------------------------------------------------------------------------------

5. Database Models

Review Model:-

class Review(models.Model):
    name = models.CharField(max_length=100)
    review = models.TextField()
    sentiment = models.CharField(max_length=10)  # Positive/Negative/Neutral
    is_resolved = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

-------------------------------------------------------------------------------------------------------------------------------------

6. URL Structure

| URL                                       | View               | Description                      |
| ----------------------------------------- | ------------------ | -------------------------------- |
| `/`                                       | `home`             | Homepage                         |
| `/about/`                                 | `about`            | About page                       |
| `/contact/`                               | `contact`          | Contact page                     |
| `/reviews/`                               | `customer_reviews` | Display customer-visible reviews |
| `/owner/reviews/`                         | `owner_reviews`    | Admin dashboard (all reviews)    |
| `/owner/reviews/<int:review_id>/resolve/` | `resolve_review`   | Mark review as resolved          |
| `/login/`                                 | `login_view`       | Owner login                      |                         |


------------------------------------------------------------------------------------------------------------------------------------------

7. ML Model (Sentiment Classifier)

Dataset: Pre-collected labeled restaurant/movie reviews.

Preprocessing: Tokenization, stopword removal, TF-IDF vectorization.

Algorithm: Logistic Regression / Naive Bayes.

Training Script: ml_model.py

Model saved as sentiment_model.pkl and loaded in Django views.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

8. Workflow Example

User â†’ Submits review: "Food was tasty and service was excellent!" 

Django â†’ Passes review to ML model.

Model â†’ Classifies as Positive.

Review stored in DB with sentiment Positive.

On frontend:

Customer side â†’ Review displayed.

Admin dashboard â†’ Review displayed with option to resolve.

-----------------------------------------------------------------------------------------------------------------------

9. Future Improvements

ðŸ“Œ Add reply feature for admin.

ðŸ“Œ Add visualization dashboard (charts of sentiment distribution).

ðŸ“Œ Deploy ML model with FastAPI/Flask API for scalability.

ðŸ“Œ Use deep learning model (BERT, LSTM) for better accuracy.

ðŸ“Œ Deploy project on Heroku / AWS / Railway.